name: Build and Publish

on:
  push:
    branches:
      - main
  release:
    types: [published]

jobs:
  build:
    name: Run build.ps1 and publish.ps1 on macOS

    runs-on: macos-latest

    permissions:
      contents: write

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      # - name: Install PowerShell
      #   run: |
      #     brew install --cask powershell

      - name: Set version
        id: version
        shell: pwsh
        run: |
          $version = node -p "require('./npm-module/package.json').version"
          if ('${{ github.event_name }}' -eq 'push') {
            $version = "$version-beta.${{ github.run_number }}"
          }
          "version=$version" >> '$GITHUB_OUTPUT'

      - name: Run build.ps1
        shell: pwsh
        run: |
          ./build.ps1 -Version '${{ steps.version.outputs.version }}'

      - name: Upload packages to workflow run
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: ./.dist/*.tgz
          include-hidden-files: true

      - name: Upload packages to release
        if: github.event_name == 'release'
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
        run: gh release upload "${{ github.event.release.tag_name }}" "./.dist/*.tgz"

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          ./publish.ps1
  test:
    name: Run install test on ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node: [20.x]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install mplat
        env:
          mplat_version: ${{needs.build.outputs.version}}
        shell: pwsh
        run: |
          $version = $env:mplat_version
          npx "@halipr/mplat@$version" some test string

          npm install -g "@halipr/mplat@$version"
          mplat some test string
